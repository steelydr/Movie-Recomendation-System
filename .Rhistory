#Install the pacman package
if(!require(pacman)) install.packages("pacman", repos = "http://cran.us.r-project.org")
#Load the required libraries
#If a package below is missing, p_load will automatically download it from CRAN
pacman::p_load(tidyverse, ggplot2, ggthemes, data.table, lubridate, caret,
knitr, scales, treemapify)
pacman::p_load(stringr)
pacman::p_load(dplyr)
#Download File
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
#Create the Data Frame "ratings" using fread from library(data.table)
ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\:\\:", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>%
mutate(movieId = as.numeric(unique(movieId)),
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
#Designate the validation set as 10% of the MovieLens data
set.seed(1, sample.kind="Rounding")
test_index <-createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <-movielens[-test_index,]
temp <-movielens[test_index,]
#Check if userId and movieId in validation set are also in edx set
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
#Merge the rows that were removed from the validation set back into the edx set
removed <-anti_join(temp, validation)
edx <-rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
edx %>% as_tibble()
#Confirm the dimensions and explore the features and classes of edx.
glimpse(edx)
#Determine the unique number of userIds, movieIds, and genres
edx %>% summarize(unique_users = length(unique(userId)),
unique_movies = length(unique(movieId)),
unique_genres = length(unique(genres)))
#Ratings
length(unique(edx$rating))
unique_ratings <-unique(edx$rating)
sort(unique_ratings)
#View a Tibble of the Ratings Distribution
edx %>% group_by(rating) %>% summarize(ratings_sum = n()) %>%
arrange(desc(ratings_sum))
#See the Ratings Distribution
edx %>% group_by(rating) %>% summarize(ratings_sum = n()) %>%
arrange(desc(ratings_sum))
rp <-edx %>% filter(edx$rating >=3)
nrow(rp)/length(edx$rating)
#Convert the timestamp to “RatingYear” for the edx dataset
edx <- edx %>% mutate(timestamp = as.POSIXct(timestamp, origin = "1970-01-01",
tz = "EST"))
edx$timestamp <- format(edx$timestamp, "%Y")
names(edx)[names(edx) == "timestamp"] <- "RatingYear"
head(edx)
validation <- validation %>%
mutate(RatingYear = as.numeric(RatingYear)) %>%
mutate(RatingYear = as.POSIXct(paste0(RatingYear, "-01-01"), format = "%Y-%m-%d"))
validation <- validation %>% mutate(timestamp = as.POSIXct(timestamp, origin = "1970-01-01",
tz = "EST"))
validation$timestamp <- format(validation$timestamp, "%Y")
names(validation)[names(validation) == "timestamp"] <- "RatingYear"
head(validation)
edx_train <- edx_train %>% mutate(timestamp = as.POSIXct(timestamp, origin = "1970-01-01",
tz = "EST"))
edx_train <- edx_train %>% mutate(timestamp = as.POSIXct(timestamp, origin = "1970-01-01",
tz = "EST"))
validation <- validation %>% mutate(timestamp = as.POSIXct(timestamp, origin = "1970-01-01",
tz = "EST"))
#Transform the timestamp column of the edx dataset to a 'RatingYear' format.
edx <- edx %>% mutate(timestamp = as.POSIXct(timestamp, origin = "1970-01-01",
tz = "EST"))
#Install the pacman package
if(!require(pacman)) install.packages("pacman", repos = "http://cran.us.r-project.org")
#Load the required libraries
#If a package below is missing, p_load will automatically download it from CRAN
pacman::p_load(tidyverse, ggplot2, ggthemes, data.table, lubridate, caret,
knitr, scales, treemapify)
pacman::p_load(stringr)
pacman::p_load(dplyr)
#Download File
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
#Construct a data frame called 'ratings' by utilizing the 'fread' function from the data.table library
ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
